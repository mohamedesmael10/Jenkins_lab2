{"version":3,"sources":["BooksAPI.js","components/ChangeShelf.js","components/BookItem.js","components/SearchPage.js","components/BooksShelves.js","components/ContentOfBooksList.js","components/Header.js","components/SearchButton.js","components/BooksList.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","update","book","shelf","fetch","id","method","body","JSON","stringify","then","res","json","search","query","data","books","ChangeShelf","ShelfUpdate","e","props","changeShelfs","target","value","this","defaultShelf","item","className","onChange","defaultValue","disabled","Component","BookItem","title","coverImage","imageLinks","thumbnail","style","backgroundImage","authors","map","author","index","key","SearchPage","state","addBooks","notFound","findBooks","setState","BooksAPI","trim","length","to","type","placeholder","BooksShelves","ContentOfBooksList","booksOfShelf","filter","Header","SearchButton","BooksList","BooksApp","changedBook","response","prevState","concat","exact","path","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.a635c216.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React, { Component } from 'react'\r\n\r\n\r\nclass ChangeShelf extends Component {\r\n    // When the value changes --> Update shelf state\r\n    ShelfUpdate = e =>\r\n    this.props.changeShelfs(this.props.book, e.target.value)\r\n\r\n    render() {\r\n        const {book, books} = this.props\r\n\r\n        // If the Book is not added to any Shelf, Make shelf's value = none\r\n        let defaultShelf = 'none'\r\n        for (let item of books) {\r\n            if (item.id === book.id) {\r\n                defaultShelf = item.shelf\r\n                break\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"book-shelf-changer\">\r\n                <select onChange={this.ShelfUpdate} defaultValue={defaultShelf}>\r\n                    <option disabled>\r\n                        Move to...\r\n                    </option>\r\n                    <option value=\"currentlyReading\">Currently Reading</option>\r\n                    <option value=\"wantToRead\">Want to Read</option>\r\n                    <option value=\"read\">Read</option>\r\n                    <option value=\"none\">None</option>\r\n                </select>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChangeShelf","import React from 'react';\r\nimport ChangeShelf from './ChangeShelf';\r\n\r\nconst BookItem = (props) => {\r\n    const { book, books, changeShelfs } = props\r\n\r\n    const title = book.title ? book.title : 'No title';\r\n\r\n    const coverImage = book.imageLinks && book.imageLinks.thumbnail ? book.imageLinks.thumbnail : \"No Cover Found\"\r\n\r\n    return (\r\n        <li>\r\n            <div className=\"book\">\r\n                <div className=\"book-top book-cover\" style={{ backgroundImage: `url(${coverImage})` }}>\r\n                    <ChangeShelf book={book} books={books} changeShelfs={changeShelfs} />\r\n                </div>\r\n                <div className=\"book-title\">{title}</div>\r\n            {\r\n            book.authors &&\r\n            book.authors.map((author, index) => (\r\n                <div className=\"book-authors\" key={index}>\r\n                        {author}\r\n                </div>\r\n            ))}\r\n            </div>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default BookItem","import React, { Component } from 'react';\r\nimport * as BooksAPI from '../BooksAPI'\r\nimport BookItem from './BookItem';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass SearchPage extends Component {\r\n\r\n    // Manage Adding, Query and notFound States\r\n    state = {\r\n        addBooks: [],\r\n        query: [],\r\n        notFound: false\r\n    }\r\n\r\n    // Updates The Query With The New State\r\n    findBooks = e => {\r\n        const query = e.target.value\r\n        this.setState({query})\r\n\r\n    // To Run Search Immediatly On (IF) User's Input\r\n        if (query) {\r\n            BooksAPI.search(query.trim(), 20).then((books) => {\r\n                books.length > 0 ? this.setState({addBooks: books, notFound: false}) : this.setState({addBooks: [], notFound:true})\r\n            })\r\n        } else this.setState({addBooks: [], notFound: false})\r\n    }\r\n\r\n    render(){\r\n        const { addBooks, query, notFound } = this.state\r\n        const { books, changeShelfs } = this.props\r\n\r\n        return(\r\n            <div className=\"search-books\">\r\n                <div className=\"search-books-bar\">\r\n                    <Link to=\"/\" className=\"close-search\">Close</Link>\r\n                    <div className=\"search-books-input-wrapper\">\r\n                    <input\r\n                    type=\"text\"\r\n                    placeholder=\"Search by title or author\"\r\n                    value={query}\r\n                    onChange={this.findBooks}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"search-books-results\">\r\n                    {addBooks.length > 0 && (\r\n                        <div>\r\n                            <p>Number Of Books Found {addBooks.length} Book</p>\r\n                            <ol className=\"books-grid\">\r\n                                {addBooks.map((book) => (\r\n                                    <BookItem key={book.id} books={books} book={book} changeShelfs={changeShelfs} />\r\n                                ))}\r\n                            </ol>\r\n                        </div>\r\n                    )}\r\n                    {/* If User's Input doesn't Match  The Search Terms */}\r\n                    {notFound && (\r\n                        <p>Please check what you wrote and try again.</p>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchPage","import React from 'react'\r\nimport BookItem from './BookItem'\r\n\r\nconst BooksShelves = (props) => {\r\n\r\n  const { books, changeShelfs } = props\r\n\r\n  return(\r\n    <ol className=\"books-grid\">\r\n      {books.map((book) => (\r\n        <BookItem\r\n          key={book.id}\r\n          book={book}\r\n          books={books}\r\n          changeShelfs={changeShelfs}\r\n        />\r\n      ))}\r\n    </ol>\r\n  )\r\n}\r\n\r\nexport default BooksShelves","import React from 'react';\r\nimport BooksShelves from './BooksShelves';\r\n\r\nconst ContentOfBooksList = (props) => {\r\n\r\n    const { books, changeShelfs } = props\r\n    const shelfNames = [\r\n        {key: \"currentlyReading\", title: \"Currently Reading\"},\r\n        {key: \"wantToRead\", title: \"Want To Read\"},\r\n        {key: \"read\", title: \"Read\"}\r\n    ]\r\n\r\n    return (\r\n        <div className=\"list-books-content\">\r\n        {shelfNames.map((shelf, index) => {\r\n            // Filter Catagorised Books Only\r\n            const booksOfShelf = books.filter((book) => book.shelf === shelf.key)\r\n            return(\r\n                <div className=\"bookshelf\" key={index}>\r\n                    <h2 className=\"bookshelf-title\">{shelf.title}</h2>\r\n                    <div className=\"bookshelf-books\">\r\n                    <BooksShelves books={booksOfShelf} changeShelfs={changeShelfs} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContentOfBooksList","import React from 'react';\r\n\r\nconst Header = () => {\r\n\r\n    return (\r\n        <div className=\"list-books-title\">\r\n            <h1>MyReads</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst SearchButton = () => {\r\n    return (\r\n        <Link\r\n            to='/search'\r\n            className=\"open-search\"\r\n            >Add a book</Link>\r\n    )\r\n}\r\n\r\nexport default SearchButton","import React, { Component } from 'react';\r\nimport ContentOfBooksList from './ContentOfBooksList';\r\nimport Header from './Header';\r\nimport SearchButton from './SearchButton';\r\n\r\nclass BooksList extends Component {\r\n\r\n\r\n    render() {\r\n\r\n        const { books, changeShelfs } = this.props\r\n\r\n\r\n        return(\r\n            <div className=\"list-books\">\r\n\r\n            <Header />\r\n\r\n            <ContentOfBooksList books={books} changeShelfs={changeShelfs} />\r\n\r\n            <SearchButton />\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BooksList","import React, {Component} from \"react\";\nimport { Route } from \"react-router-dom\";\nimport * as BooksAPI from './BooksAPI'\nimport \"./App.css\";\nimport SearchPage from \"./components/SearchPage\";\nimport BooksList from \"./components/BooksList\";\n\nclass BooksApp extends Component {\n\n  state = {\n    books: []\n  };\n\n  changeShelfs = (changedBook, shelf) => {\n    BooksAPI.update(changedBook, shelf).then(response => {\n      // Update Book State\n      changedBook.shelf = shelf;\n      this.setState(prevState => ({\n        books: prevState.books\n          .filter(book => book.id !== changedBook.id)\n          .concat(changedBook)\n      }));\n    });\n  };\n\n  // Get All Books When Load\n  componentDidMount() {\n    BooksAPI.getAll().then(books => this.setState({ books }));\n  }\n\n  render() {\n    const { books } = this.state\n\n    return (\n      // The Main APP Component\n      <div className=\"app\">\n\n        {/* Search Page Component */}\n        <Route\n          exact path=\"/search\"\n          render={() => (\n            <SearchPage books={books} changeShelfs={this.changeShelfs} />\n          )} />\n\n        {/* Books List Component */}\n        <Route\n        exact path=\"/\"\n        render={() => (\n          <BooksList books={books} changeShelfs={this.changeShelfs} />\n        )} />\n\n      </div>\n    );\n  }\n}\n\nexport default BooksApp;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, document.getElementById('root'))\n"],"sourceRoot":""}